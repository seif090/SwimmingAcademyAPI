// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwimmingAcademy.Data;

#nullable disable

namespace SwimmingAcademy.Migrations
{
    [DbContext(typeof(SwimmingAcademyContext))]
    [Migration("20250615115740_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SwimmingAcademy.Models.Action", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionID"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInv")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("SameSite")
                        .HasColumnType("bit");

                    b.HasKey("ActionID")
                        .HasName("PK__Actions__FFE3F4B9FF23B4F3");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.AppCode", b =>
                {
                    b.Property<short>("sub_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("sub_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("disabled")
                        .HasColumnType("bit");

                    b.Property<short>("main_id")
                        .HasColumnType("smallint");

                    b.HasKey("sub_id")
                        .HasName("PK__AppCodes__694106B082539A84");

                    b.ToTable("AppCodes");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Coach", b =>
                {
                    b.Property<int>("CoachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachID"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<short>("CoachType")
                        .HasColumnType("smallint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("certificated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("createdAtDate")
                        .HasColumnType("datetime");

                    b.Property<short>("createdAtSite")
                        .HasColumnType("smallint");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<string>("mobileNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<short>("site")
                        .HasColumnType("smallint");

                    b.Property<DateOnly?>("updatedAtDate")
                        .HasColumnType("date");

                    b.Property<short?>("updatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<short?>("updatedBy")
                        .HasColumnType("smallint");

                    b.HasKey("CoachID")
                        .HasName("PK__Coaches__F411D9A18D02D016");

                    b.HasIndex("CoachType");

                    b.HasIndex("Gender");

                    b.HasIndex("createdAtSite");

                    b.HasIndex("createdBy");

                    b.HasIndex("site");

                    b.HasIndex("updatedAtSite");

                    b.HasIndex("updatedBy");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Detail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Attendence")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<short>("LastStar")
                        .HasColumnType("smallint");

                    b.Property<long>("PTeamID")
                        .HasColumnType("bigint");

                    b.Property<long>("SwimmerID")
                        .HasColumnType("bigint");

                    b.Property<short>("SwimmerLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("site")
                        .HasColumnType("smallint");

                    b.HasKey("ID")
                        .HasName("PK__Details__3214EC2716204D81");

                    b.HasIndex("CoachID");

                    b.HasIndex("PTeamID");

                    b.HasIndex("SwimmerID");

                    b.HasIndex("SwimmerLevel");

                    b.HasIndex("site");

                    b.ToTable("Details", "PreTeam");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Detail1", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal?>("Attendence")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<long>("SchoolID")
                        .HasColumnType("bigint");

                    b.Property<long>("SwimmerID")
                        .HasColumnType("bigint");

                    b.Property<short>("SwimmerLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("site")
                        .HasColumnType("smallint");

                    b.HasKey("ID")
                        .HasName("PK__Details__3214EC270D648956");

                    b.HasIndex("CoachID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("SwimmerID");

                    b.HasIndex("SwimmerLevel");

                    b.HasIndex("site");

                    b.ToTable("Details", "Schools");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Ended", b =>
                {
                    b.Property<DateOnly>("EndedAt")
                        .HasColumnType("date");

                    b.Property<int>("EndedBy")
                        .HasColumnType("int");

                    b.Property<long>("PTeamID")
                        .HasColumnType("bigint");

                    b.HasIndex("EndedBy");

                    b.HasIndex("PTeamID");

                    b.ToTable("Ended", "PreTeam");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Ended1", b =>
                {
                    b.Property<DateOnly>("EndedAt")
                        .HasColumnType("date");

                    b.Property<int>("EndedBy")
                        .HasColumnType("int");

                    b.Property<long>("Schoolid")
                        .HasColumnType("bigint");

                    b.HasIndex("EndedBy");

                    b.HasIndex("Schoolid");

                    b.ToTable("Ended", "Schools");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Info", b =>
                {
                    b.Property<long>("PTeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PTeamID"));

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<decimal>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 0)")
                        .HasDefaultValueSql("('09:30:00')");

                    b.Property<string>("FirstDay")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("ISEnded")
                        .HasColumnType("bit");

                    b.Property<short>("PTeamLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("SecondDay")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 0)")
                        .HasDefaultValueSql("('08:00:00')");

                    b.Property<string>("ThirdDay")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("createdAtDate")
                        .HasColumnType("datetime");

                    b.Property<short>("createdAtSite")
                        .HasColumnType("smallint");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<short>("site")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("updatedAtDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("updatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("int");

                    b.HasKey("PTeamID")
                        .HasName("PK__Info__C79A741AF2980D16");

                    b.HasIndex("CoachID");

                    b.HasIndex("PTeamLevel");

                    b.HasIndex("createdAtSite");

                    b.HasIndex("createdBy");

                    b.HasIndex("site");

                    b.HasIndex("updatedAtSite");

                    b.HasIndex("updatedBy");

                    b.ToTable("Info", "PreTeam");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Info2", b =>
                {
                    b.Property<long>("SwimmerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SwimmerID"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<short>("CLub")
                        .HasColumnType("smallint");

                    b.Property<short>("CreatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<short>("CurrentLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("FulllName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<short>("Site")
                        .HasColumnType("smallint");

                    b.Property<short>("StartLevel")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAtDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("UpdatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAtDate")
                        .HasColumnType("datetime");

                    b.HasKey("SwimmerID")
                        .HasName("PK__Info__E8BD7A652CB82250");

                    b.HasIndex("CLub");

                    b.HasIndex("CreatedAtSite");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrentLevel");

                    b.HasIndex("Gender");

                    b.HasIndex("Site");

                    b.HasIndex("StartLevel");

                    b.HasIndex("UpdatedAtSite");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Info", "Swimmers");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Invoice_Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateOnly>("CreatedAtDate")
                        .HasColumnType("date");

                    b.Property<short>("CreatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<short?>("DurationInMonths")
                        .HasColumnType("smallint");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<short?>("ProductID")
                        .HasColumnType("smallint");

                    b.Property<short?>("Site")
                        .HasColumnType("smallint");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdatedAtDate")
                        .HasColumnType("date");

                    b.Property<short?>("UpdatedAtSite")
                        .HasColumnType("smallint");

                    b.HasKey("ItemID")
                        .HasName("PK__Invoice___727E83EB2E050C43");

                    b.HasIndex("ActionID");

                    b.HasIndex("CreatedAtSite");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductID");

                    b.HasIndex("Site");

                    b.HasIndex("UpdateBy");

                    b.HasIndex("UpdatedAtSite");

                    b.ToTable("Invoice_Item", (string)null);
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Parent", b =>
                {
                    b.Property<long>("SwimmerID")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<short?>("MemberOf")
                        .HasColumnType("smallint");

                    b.Property<string>("PrimaryJop")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("SecondaryJop")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("SwimmerName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("SwimmerID")
                        .HasName("PK__Parent__E8BD7A65A62F86BB");

                    b.HasIndex("MemberOf");

                    b.ToTable("Parent", "Swimmers");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Technical", b =>
                {
                    b.Property<long>("SwimmerID")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("AddedAt")
                        .HasColumnType("date");

                    b.Property<int>("Addedby")
                        .HasColumnType("int");

                    b.Property<short>("CurrentLevel")
                        .HasColumnType("smallint");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<short?>("FirstSP")
                        .HasColumnType("smallint");

                    b.Property<bool?>("ISPreTeam")
                        .HasColumnType("bit");

                    b.Property<bool?>("ISSchool")
                        .HasColumnType("bit");

                    b.Property<bool?>("ISTeam")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFins")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFs")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIM")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLong")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMono")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShort")
                        .HasColumnType("bit");

                    b.Property<short?>("LastStar")
                        .HasColumnType("smallint");

                    b.Property<short?>("SecondSP")
                        .HasColumnType("smallint");

                    b.Property<short>("Site")
                        .HasColumnType("smallint");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SwimmerID")
                        .HasName("PK__Technica__E8BD7A65C169533B");

                    b.HasIndex("Addedby");

                    b.HasIndex("CurrentLevel");

                    b.HasIndex("FirstSP");

                    b.HasIndex("LastStar");

                    b.HasIndex("SecondSP");

                    b.HasIndex("Site");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Technical", "Swimmers");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Time", b =>
                {
                    b.Property<long>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TID"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("AddedBY")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RaceDate")
                        .HasColumnType("date");

                    b.Property<short>("RaceID")
                        .HasColumnType("smallint");

                    b.Property<short>("RacePlaceID")
                        .HasColumnType("smallint");

                    b.Property<short>("Site")
                        .HasColumnType("smallint");

                    b.Property<long>("SwimmerID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Time1")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("Time");

                    b.HasKey("TID")
                        .HasName("PK__Times__C456D7296CF66AEE");

                    b.HasIndex("AddedBY");

                    b.HasIndex("RaceID");

                    b.HasIndex("RacePlaceID");

                    b.HasIndex("Site");

                    b.HasIndex("SwimmerID");

                    b.ToTable("Times", "Swimmers");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Users_Priv", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<short>("UserTypeID")
                        .HasColumnType("smallint");

                    b.HasKey("ID")
                        .HasName("PK__Users_Pr__3214EC270E3A9EF0");

                    b.HasIndex("ActionID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("Users_Priv", (string)null);
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Users_Site", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<short>("Site")
                        .HasColumnType("smallint");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK__Users_Si__3214EC275E69442C");

                    b.HasIndex("Site");

                    b.HasIndex("UserID");

                    b.ToTable("Users_Sites");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.info1", b =>
                {
                    b.Property<long>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SchoolID"));

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<decimal>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 0)")
                        .HasDefaultValueSql("('09:30:00')");

                    b.Property<string>("FirstDay")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaxNumber")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("NumberOfSwimmers")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<short>("SchoolType")
                        .HasColumnType("smallint");

                    b.Property<string>("SecondDay")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 0)")
                        .HasDefaultValueSql("('08:30:00')");

                    b.Property<DateTime>("createdAtDate")
                        .HasColumnType("datetime");

                    b.Property<short>("createdAtSite")
                        .HasColumnType("smallint");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<short>("schoolLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("site")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("updatedAtDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("updatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("int");

                    b.HasKey("SchoolID")
                        .HasName("PK__info__3DA4677BD433C5F5");

                    b.HasIndex("CoachID");

                    b.HasIndex("SchoolType");

                    b.HasIndex("createdAtSite");

                    b.HasIndex("createdBy");

                    b.HasIndex("schoolLevel");

                    b.HasIndex("site");

                    b.HasIndex("updatedAtSite");

                    b.HasIndex("updatedBy");

                    b.ToTable("info", "Schools");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.log", b =>
                {
                    b.Property<long>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LID"));

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<short>("CreatedAtSite")
                        .HasColumnType("smallint");

                    b.Property<long>("PteamID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SwimmerID")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("createdAtDate")
                        .HasColumnType("date");

                    b.Property<int>("createdby")
                        .HasColumnType("int");

                    b.HasKey("LID")
                        .HasName("PK__log__C65557219DB6DF1E");

                    b.HasIndex("ActionID");

                    b.HasIndex("CreatedAtSite");

                    b.HasIndex("PteamID");

                    b.HasIndex("SwimmerID");

                    b.HasIndex("createdby");

                    b.ToTable("log", "PreTeam");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.log1", b =>
                {
                    b.Property<long>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LID"));

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedAtDate")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<short>("createdAtsite")
                        .HasColumnType("smallint");

                    b.Property<long>("schoolID")
                        .HasColumnType("bigint");

                    b.Property<long?>("swimmerID")
                        .HasColumnType("bigint");

                    b.HasKey("LID")
                        .HasName("PK__log__C6555721D313A0E7");

                    b.HasIndex("ActionID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("createdAtsite");

                    b.HasIndex("schoolID");

                    b.HasIndex("swimmerID");

                    b.ToTable("log", "Schools");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.log2", b =>
                {
                    b.Property<long>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LID"));

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedAtDate")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<short>("createdAtsite")
                        .HasColumnType("smallint");

                    b.Property<long>("swimmerID")
                        .HasColumnType("bigint");

                    b.HasKey("LID")
                        .HasName("PK__log__C6555721C4CDAF7A");

                    b.HasIndex("ActionID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("createdAtsite");

                    b.HasIndex("swimmerID");

                    b.ToTable("log", "Swimmers");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.tran", b =>
                {
                    b.Property<long>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<short?>("DurationInMonth")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<int>("action")
                        .HasColumnType("int");

                    b.Property<int?>("createdBy")
                        .HasColumnType("int");

                    b.Property<int>("itemID")
                        .HasColumnType("int");

                    b.Property<short>("productID")
                        .HasColumnType("smallint");

                    b.Property<short>("site")
                        .HasColumnType("smallint");

                    b.Property<long>("swimmerID")
                        .HasColumnType("bigint");

                    b.HasKey("TID")
                        .HasName("PK__trans__C456D729C2A6D762");

                    b.HasIndex("action");

                    b.HasIndex("createdBy");

                    b.HasIndex("itemID");

                    b.HasIndex("productID");

                    b.HasIndex("site");

                    b.HasIndex("swimmerID");

                    b.ToTable("trans");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.user", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userid"));

                    b.Property<short>("CreatedBy")
                        .HasColumnType("smallint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("Site")
                        .HasColumnType("smallint");

                    b.Property<short>("UserTypeID")
                        .HasColumnType("smallint");

                    b.Property<bool>("disabled")
                        .HasColumnType("bit");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("userid")
                        .HasName("PK__users__CBA1B2575DDDE890");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Site");

                    b.HasIndex("UserTypeID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Coach", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.AppCode", "CoachTypeNavigation")
                        .WithMany("CoachCoachTypeNavigations")
                        .HasForeignKey("CoachType")
                        .IsRequired()
                        .HasConstraintName("FK__Coaches__CoachTy__3C69FB99");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "GenderNavigation")
                        .WithMany("CoachGenderNavigations")
                        .HasForeignKey("Gender")
                        .IsRequired()
                        .HasConstraintName("FK__Coaches__Gender__3F466844");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "createdAtSiteNavigation")
                        .WithMany("CoachcreatedAtSiteNavigations")
                        .HasForeignKey("createdAtSite")
                        .IsRequired()
                        .HasConstraintName("FK__Coaches__created__3D5E1FD2");

                    b.HasOne("SwimmingAcademy.Models.user", "createdByNavigation")
                        .WithMany("Coaches")
                        .HasForeignKey("createdBy")
                        .IsRequired()
                        .HasConstraintName("FK__Coaches__created__3E52440B");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "siteNavigation")
                        .WithMany("CoachsiteNavigations")
                        .HasForeignKey("site")
                        .IsRequired()
                        .HasConstraintName("FK__Coaches__site__403A8C7D");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "updatedAtSiteNavigation")
                        .WithMany("CoachupdatedAtSiteNavigations")
                        .HasForeignKey("updatedAtSite")
                        .HasConstraintName("FK__Coaches__updated__467D75B8");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "updatedByNavigation")
                        .WithMany("CoachupdatedByNavigations")
                        .HasForeignKey("updatedBy")
                        .HasConstraintName("FK__Coaches__updated__477199F1");

                    b.Navigation("CoachTypeNavigation");

                    b.Navigation("GenderNavigation");

                    b.Navigation("createdAtSiteNavigation");

                    b.Navigation("createdByNavigation");

                    b.Navigation("siteNavigation");

                    b.Navigation("updatedAtSiteNavigation");

                    b.Navigation("updatedByNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Detail", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Coach", "Coach")
                        .WithMany("Details")
                        .HasForeignKey("CoachID")
                        .IsRequired()
                        .HasConstraintName("FK__Details__CoachID__43D61337");

                    b.HasOne("SwimmingAcademy.Models.Info", "PTeam")
                        .WithMany("Details")
                        .HasForeignKey("PTeamID")
                        .IsRequired()
                        .HasConstraintName("FK__Details__PTeamID__41EDCAC5");

                    b.HasOne("SwimmingAcademy.Models.Info2", "Swimmer")
                        .WithMany("Details")
                        .HasForeignKey("SwimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__Details__Swimmer__42E1EEFE");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SwimmerLevelNavigation")
                        .WithMany("DetailSwimmerLevelNavigations")
                        .HasForeignKey("SwimmerLevel")
                        .IsRequired()
                        .HasConstraintName("FK__Details__Swimmer__44CA3770");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "siteNavigation")
                        .WithMany("DetailsiteNavigations")
                        .HasForeignKey("site")
                        .IsRequired()
                        .HasConstraintName("FK__Details__site__45BE5BA9");

                    b.Navigation("Coach");

                    b.Navigation("PTeam");

                    b.Navigation("Swimmer");

                    b.Navigation("SwimmerLevelNavigation");

                    b.Navigation("siteNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Detail1", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Coach", "Coach")
                        .WithMany("Detail1s")
                        .HasForeignKey("CoachID")
                        .IsRequired()
                        .HasConstraintName("FK__Details__CoachID__2DE6D218");

                    b.HasOne("SwimmingAcademy.Models.info1", "School")
                        .WithMany("Detail1s")
                        .HasForeignKey("SchoolID")
                        .IsRequired()
                        .HasConstraintName("FK__Details__SchoolI__2BFE89A6");

                    b.HasOne("SwimmingAcademy.Models.Info2", "Swimmer")
                        .WithMany("Detail1s")
                        .HasForeignKey("SwimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__Details__Swimmer__2CF2ADDF");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SwimmerLevelNavigation")
                        .WithMany("Detail1SwimmerLevelNavigations")
                        .HasForeignKey("SwimmerLevel")
                        .IsRequired()
                        .HasConstraintName("FK__Details__Swimmer__2EDAF651");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "siteNavigation")
                        .WithMany("Detail1siteNavigations")
                        .HasForeignKey("site")
                        .IsRequired()
                        .HasConstraintName("FK__Details__site__2FCF1A8A");

                    b.Navigation("Coach");

                    b.Navigation("School");

                    b.Navigation("Swimmer");

                    b.Navigation("SwimmerLevelNavigation");

                    b.Navigation("siteNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Ended", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.user", "EndedByNavigation")
                        .WithMany()
                        .HasForeignKey("EndedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Ended__EndedBy__5D60DB10");

                    b.HasOne("SwimmingAcademy.Models.Info", "PTeam")
                        .WithMany()
                        .HasForeignKey("PTeamID")
                        .IsRequired()
                        .HasConstraintName("FK__Ended__PTeamID__5E54FF49");

                    b.Navigation("EndedByNavigation");

                    b.Navigation("PTeam");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Ended1", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.user", "EndedByNavigation")
                        .WithMany()
                        .HasForeignKey("EndedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Ended__EndedBy__6CA31EA0");

                    b.HasOne("SwimmingAcademy.Models.info1", "School")
                        .WithMany()
                        .HasForeignKey("Schoolid")
                        .IsRequired()
                        .HasConstraintName("FK__Ended__Schoolid__6D9742D9");

                    b.Navigation("EndedByNavigation");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Info", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Coach", "Coach")
                        .WithMany("Infos")
                        .HasForeignKey("CoachID")
                        .IsRequired()
                        .HasConstraintName("FK__Info__CoachID__3493CFA7");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "PTeamLevelNavigation")
                        .WithMany("InfoPTeamLevelNavigations")
                        .HasForeignKey("PTeamLevel")
                        .IsRequired()
                        .HasConstraintName("FK__Info__PTeamLevel__339FAB6E");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "createdAtSiteNavigation")
                        .WithMany("InfocreatedAtSiteNavigations")
                        .HasForeignKey("createdAtSite")
                        .IsRequired()
                        .HasConstraintName("FK__Info__createdAtS__367C1819");

                    b.HasOne("SwimmingAcademy.Models.user", "createdByNavigation")
                        .WithMany("InfocreatedByNavigations")
                        .HasForeignKey("createdBy")
                        .IsRequired()
                        .HasConstraintName("FK__Info__createdBy__37703C52");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "siteNavigation")
                        .WithMany("InfositeNavigations")
                        .HasForeignKey("site")
                        .IsRequired()
                        .HasConstraintName("FK__Info__site__3587F3E0");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "updatedAtSiteNavigation")
                        .WithMany("InfoupdatedAtSiteNavigations")
                        .HasForeignKey("updatedAtSite")
                        .HasConstraintName("FK__Info__updatedAtS__3864608B");

                    b.HasOne("SwimmingAcademy.Models.user", "updatedByNavigation")
                        .WithMany("InfoupdatedByNavigations")
                        .HasForeignKey("updatedBy")
                        .HasConstraintName("FK__Info__updatedBy__395884C4");

                    b.Navigation("Coach");

                    b.Navigation("PTeamLevelNavigation");

                    b.Navigation("createdAtSiteNavigation");

                    b.Navigation("createdByNavigation");

                    b.Navigation("siteNavigation");

                    b.Navigation("updatedAtSiteNavigation");

                    b.Navigation("updatedByNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Info2", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.AppCode", "CLubNavigation")
                        .WithMany("Info2CLubNavigations")
                        .HasForeignKey("CLub")
                        .IsRequired()
                        .HasConstraintName("FK__Info__CLub__7AF13DF7");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "CreatedAtSiteNavigation")
                        .WithMany("Info2CreatedAtSiteNavigations")
                        .HasForeignKey("CreatedAtSite")
                        .IsRequired()
                        .HasConstraintName("FK__Info__CreatedAtS__7BE56230");

                    b.HasOne("SwimmingAcademy.Models.user", "CreatedByNavigation")
                        .WithMany("Info2CreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Info__CreatedBy__7CD98669");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "CurrentLevelNavigation")
                        .WithMany("Info2CurrentLevelNavigations")
                        .HasForeignKey("CurrentLevel")
                        .IsRequired()
                        .HasConstraintName("FK__Info__CurrentLev__7A672E12");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "GenderNavigation")
                        .WithMany("Info2GenderNavigations")
                        .HasForeignKey("Gender")
                        .IsRequired()
                        .HasConstraintName("FK__Info__Gender__7C4F7684");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SiteNavigation")
                        .WithMany("Info2SiteNavigations")
                        .HasForeignKey("Site")
                        .IsRequired()
                        .HasConstraintName("FK__Info__Site__7B5B524B");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "StartLevelNavigation")
                        .WithMany("Info2StartLevelNavigations")
                        .HasForeignKey("StartLevel")
                        .IsRequired()
                        .HasConstraintName("FK__Info__StartLevel__00AA174D");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "UpdatedAtSiteNavigation")
                        .WithMany("Info2UpdatedAtSiteNavigations")
                        .HasForeignKey("UpdatedAtSite")
                        .HasConstraintName("FK__Info__UpdatedAtS__00200768");

                    b.HasOne("SwimmingAcademy.Models.user", "UpdatedByNavigation")
                        .WithMany("Info2UpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Info__UpdatedBy__01142BA1");

                    b.Navigation("CLubNavigation");

                    b.Navigation("CreatedAtSiteNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("CurrentLevelNavigation");

                    b.Navigation("GenderNavigation");

                    b.Navigation("SiteNavigation");

                    b.Navigation("StartLevelNavigation");

                    b.Navigation("UpdatedAtSiteNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Invoice_Item", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Action", "Action")
                        .WithMany("Invoice_Items")
                        .HasForeignKey("ActionID")
                        .IsRequired()
                        .HasConstraintName("FK__Invoice_I__Actio__02C769E9");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "CreatedAtSiteNavigation")
                        .WithMany("Invoice_ItemCreatedAtSiteNavigations")
                        .HasForeignKey("CreatedAtSite")
                        .IsRequired()
                        .HasConstraintName("FK__Invoice_I__Creat__03BB8E22");

                    b.HasOne("SwimmingAcademy.Models.user", "CreatedByNavigation")
                        .WithMany("Invoice_ItemCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Invoice_I__Creat__04AFB25B");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "Product")
                        .WithMany("Invoice_ItemProducts")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK__Invoice_I__Produ__01D345B0");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SiteNavigation")
                        .WithMany("Invoice_ItemSiteNavigations")
                        .HasForeignKey("Site")
                        .HasConstraintName("FK__Invoice_It__Site__00DF2177");

                    b.HasOne("SwimmingAcademy.Models.user", "UpdateByNavigation")
                        .WithMany("Invoice_ItemUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__Invoice_I__Updat__05A3D694");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "UpdatedAtSiteNavigation")
                        .WithMany("Invoice_ItemUpdatedAtSiteNavigations")
                        .HasForeignKey("UpdatedAtSite")
                        .HasConstraintName("FK__Invoice_I__Updat__0697FACD");

                    b.Navigation("Action");

                    b.Navigation("CreatedAtSiteNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Product");

                    b.Navigation("SiteNavigation");

                    b.Navigation("UpdateByNavigation");

                    b.Navigation("UpdatedAtSiteNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Parent", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.AppCode", "MemberOfNavigation")
                        .WithMany("Parents")
                        .HasForeignKey("MemberOf")
                        .HasConstraintName("FK__Parent__MemberOf__075714DC");

                    b.HasOne("SwimmingAcademy.Models.Info2", "Swimmer")
                        .WithOne("Parent")
                        .HasForeignKey("SwimmingAcademy.Models.Parent", "SwimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__Parent__SwimmerI__084B3915");

                    b.Navigation("MemberOfNavigation");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Technical", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.user", "AddedbyNavigation")
                        .WithMany("TechnicalAddedbyNavigations")
                        .HasForeignKey("Addedby")
                        .IsRequired()
                        .HasConstraintName("FK__Technical__Added__093F5D4E");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "CurrentLevelNavigation")
                        .WithMany("TechnicalCurrentLevelNavigations")
                        .HasForeignKey("CurrentLevel")
                        .IsRequired()
                        .HasConstraintName("FK__Technical__Curre__0A338187");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "FirstSPNavigation")
                        .WithMany("TechnicalFirstSPNavigations")
                        .HasForeignKey("FirstSP")
                        .HasConstraintName("FK__Technical__First__0B27A5C0");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "LastStarNavigation")
                        .WithMany("TechnicalLastStarNavigations")
                        .HasForeignKey("LastStar")
                        .HasConstraintName("FK__Technical__LastS__0C1BC9F9");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SecondSPNavigation")
                        .WithMany("TechnicalSecondSPNavigations")
                        .HasForeignKey("SecondSP")
                        .HasConstraintName("FK__Technical__Secon__0D0FEE32");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SiteNavigation")
                        .WithMany("TechnicalSiteNavigations")
                        .HasForeignKey("Site")
                        .IsRequired()
                        .HasConstraintName("FK__Technical__Site__0E04126B");

                    b.HasOne("SwimmingAcademy.Models.Info2", "Swimmer")
                        .WithOne("Technical")
                        .HasForeignKey("SwimmingAcademy.Models.Technical", "SwimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__Technical__Swimm__0D7A0286");

                    b.HasOne("SwimmingAcademy.Models.user", "UpdatedByNavigation")
                        .WithMany("TechnicalUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Technical__Updat__0FEC5ADD");

                    b.Navigation("AddedbyNavigation");

                    b.Navigation("CurrentLevelNavigation");

                    b.Navigation("FirstSPNavigation");

                    b.Navigation("LastStarNavigation");

                    b.Navigation("SecondSPNavigation");

                    b.Navigation("SiteNavigation");

                    b.Navigation("Swimmer");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Time", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.user", "AddedBYNavigation")
                        .WithMany("Times")
                        .HasForeignKey("AddedBY")
                        .IsRequired()
                        .HasConstraintName("FK__Times__AddedBY__18EBB532");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "Race")
                        .WithMany("TimeRaces")
                        .HasForeignKey("RaceID")
                        .IsRequired()
                        .HasConstraintName("FK__Times__RaceID__17036CC0");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "RacePlace")
                        .WithMany("TimeRacePlaces")
                        .HasForeignKey("RacePlaceID")
                        .IsRequired()
                        .HasConstraintName("FK__Times__RacePlace__17F790F9");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SiteNavigation")
                        .WithMany("TimeSiteNavigations")
                        .HasForeignKey("Site")
                        .IsRequired()
                        .HasConstraintName("FK__Times__Site__160F4887");

                    b.HasOne("SwimmingAcademy.Models.Info2", "Swimmer")
                        .WithMany("Times")
                        .HasForeignKey("SwimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__Times__SwimmerID__151B244E");

                    b.Navigation("AddedBYNavigation");

                    b.Navigation("Race");

                    b.Navigation("RacePlace");

                    b.Navigation("SiteNavigation");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Users_Priv", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Action", "Action")
                        .WithMany("Users_Privs")
                        .HasForeignKey("ActionID")
                        .IsRequired()
                        .HasConstraintName("FK__Users_Pri__Actio__57A801BA");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "UserType")
                        .WithMany("Users_Privs")
                        .HasForeignKey("UserTypeID")
                        .IsRequired()
                        .HasConstraintName("FK__Users_Pri__UserT__589C25F3");

                    b.Navigation("Action");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Users_Site", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.AppCode", "SiteNavigation")
                        .WithMany("Users_Sites")
                        .HasForeignKey("Site")
                        .IsRequired()
                        .HasConstraintName("FK__Users_Site__Site__5A846E65");

                    b.HasOne("SwimmingAcademy.Models.user", "User")
                        .WithMany("Users_Sites")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK__Users_Sit__UserI__59904A2C");

                    b.Navigation("SiteNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.info1", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Coach", "Coach")
                        .WithMany("info1s")
                        .HasForeignKey("CoachID")
                        .IsRequired()
                        .HasConstraintName("FK__info__CoachID__1CBC4616");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SchoolTypeNavigation")
                        .WithMany("info1SchoolTypeNavigations")
                        .HasForeignKey("SchoolType")
                        .IsRequired()
                        .HasConstraintName("FK__info__SchoolType__1DB06A4F");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "createdAtSiteNavigation")
                        .WithMany("info1createdAtSiteNavigations")
                        .HasForeignKey("createdAtSite")
                        .IsRequired()
                        .HasConstraintName("FK__info__createdAtS__1F98B2C1");

                    b.HasOne("SwimmingAcademy.Models.user", "createdByNavigation")
                        .WithMany("info1createdByNavigations")
                        .HasForeignKey("createdBy")
                        .IsRequired()
                        .HasConstraintName("FK__info__createdBy__208CD6FA");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "schoolLevelNavigation")
                        .WithMany("info1schoolLevelNavigations")
                        .HasForeignKey("schoolLevel")
                        .IsRequired()
                        .HasConstraintName("FK__info__schoolLeve__1BC821DD");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "siteNavigation")
                        .WithMany("info1siteNavigations")
                        .HasForeignKey("site")
                        .IsRequired()
                        .HasConstraintName("FK__info__site__1EA48E88");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "updatedAtSiteNavigation")
                        .WithMany("info1updatedAtSiteNavigations")
                        .HasForeignKey("updatedAtSite")
                        .HasConstraintName("FK__info__updatedAtS__2180FB33");

                    b.HasOne("SwimmingAcademy.Models.user", "updatedByNavigation")
                        .WithMany("info1updatedByNavigations")
                        .HasForeignKey("updatedBy")
                        .HasConstraintName("FK__info__updatedBy__22751F6C");

                    b.Navigation("Coach");

                    b.Navigation("SchoolTypeNavigation");

                    b.Navigation("createdAtSiteNavigation");

                    b.Navigation("createdByNavigation");

                    b.Navigation("schoolLevelNavigation");

                    b.Navigation("siteNavigation");

                    b.Navigation("updatedAtSiteNavigation");

                    b.Navigation("updatedByNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.log", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Action", "Action")
                        .WithMany("logs")
                        .HasForeignKey("ActionID")
                        .IsRequired()
                        .HasConstraintName("FK__log__ActionID__65F62111");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "CreatedAtSiteNavigation")
                        .WithMany("logs")
                        .HasForeignKey("CreatedAtSite")
                        .IsRequired()
                        .HasConstraintName("FK__log__CreatedAtSi__66EA454A");

                    b.HasOne("SwimmingAcademy.Models.Info", "Pteam")
                        .WithMany("logs")
                        .HasForeignKey("PteamID")
                        .IsRequired()
                        .HasConstraintName("FK__log__PteamID__68D28DBC");

                    b.HasOne("SwimmingAcademy.Models.Info2", "Swimmer")
                        .WithMany("logs")
                        .HasForeignKey("SwimmerID")
                        .HasConstraintName("FK__log__SwimmerID__69C6B1F5");

                    b.HasOne("SwimmingAcademy.Models.user", "createdbyNavigation")
                        .WithMany("logs")
                        .HasForeignKey("createdby")
                        .IsRequired()
                        .HasConstraintName("FK__log__createdby__67DE6983");

                    b.Navigation("Action");

                    b.Navigation("CreatedAtSiteNavigation");

                    b.Navigation("Pteam");

                    b.Navigation("Swimmer");

                    b.Navigation("createdbyNavigation");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.log1", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Action", "Action")
                        .WithMany("log1s")
                        .HasForeignKey("ActionID")
                        .IsRequired()
                        .HasConstraintName("FK__log__ActionID__73852659");

                    b.HasOne("SwimmingAcademy.Models.user", "CreatedByNavigation")
                        .WithMany("log1s")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__log__CreatedBy__76619304");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "createdAtsiteNavigation")
                        .WithMany("log1s")
                        .HasForeignKey("createdAtsite")
                        .IsRequired()
                        .HasConstraintName("FK__log__createdAtsi__756D6ECB");

                    b.HasOne("SwimmingAcademy.Models.info1", "school")
                        .WithMany("log1s")
                        .HasForeignKey("schoolID")
                        .IsRequired()
                        .HasConstraintName("FK__log__schoolID__72910220");

                    b.HasOne("SwimmingAcademy.Models.Info2", "swimmer")
                        .WithMany("log1s")
                        .HasForeignKey("swimmerID")
                        .HasConstraintName("FK__log__swimmerID__74794A92");

                    b.Navigation("Action");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("createdAtsiteNavigation");

                    b.Navigation("school");

                    b.Navigation("swimmer");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.log2", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Action", "Action")
                        .WithMany("log2s")
                        .HasForeignKey("ActionID")
                        .IsRequired()
                        .HasConstraintName("FK__log__ActionID__038683F8");

                    b.HasOne("SwimmingAcademy.Models.user", "CreatedByNavigation")
                        .WithMany("log2s")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__log__CreatedBy__056ECC6A");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "createdAtsiteNavigation")
                        .WithMany("log2s")
                        .HasForeignKey("createdAtsite")
                        .IsRequired()
                        .HasConstraintName("FK__log__createdAtsi__047AA831");

                    b.HasOne("SwimmingAcademy.Models.Info2", "swimmer")
                        .WithMany("log2s")
                        .HasForeignKey("swimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__log__swimmerID__0662F0A3");

                    b.Navigation("Action");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("createdAtsiteNavigation");

                    b.Navigation("swimmer");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.tran", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.Action", "actionNavigation")
                        .WithMany("trans")
                        .HasForeignKey("action")
                        .IsRequired()
                        .HasConstraintName("FK__trans__action__4F12BBB9");

                    b.HasOne("SwimmingAcademy.Models.user", "createdByNavigation")
                        .WithMany("trans")
                        .HasForeignKey("createdBy")
                        .HasConstraintName("FK__trans__createdBy__5006DFF2");

                    b.HasOne("SwimmingAcademy.Models.Invoice_Item", "item")
                        .WithMany("trans")
                        .HasForeignKey("itemID")
                        .IsRequired()
                        .HasConstraintName("FK__trans__itemID__50FB042B");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "product")
                        .WithMany("tranproducts")
                        .HasForeignKey("productID")
                        .IsRequired()
                        .HasConstraintName("FK__trans__productID__51EF2864");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "siteNavigation")
                        .WithMany("transiteNavigations")
                        .HasForeignKey("site")
                        .IsRequired()
                        .HasConstraintName("FK__trans__site__52E34C9D");

                    b.HasOne("SwimmingAcademy.Models.Info2", "swimmer")
                        .WithMany("trans")
                        .HasForeignKey("swimmerID")
                        .IsRequired()
                        .HasConstraintName("FK__trans__swimmerID__53D770D6");

                    b.Navigation("actionNavigation");

                    b.Navigation("createdByNavigation");

                    b.Navigation("item");

                    b.Navigation("product");

                    b.Navigation("siteNavigation");

                    b.Navigation("swimmer");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.user", b =>
                {
                    b.HasOne("SwimmingAcademy.Models.AppCode", "CreatedByNavigation")
                        .WithMany("userCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__users__CreatedBy__54CB950F");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "SiteNavigation")
                        .WithMany("userSiteNavigations")
                        .HasForeignKey("Site")
                        .IsRequired()
                        .HasConstraintName("FK__users__Site__398D8EEE");

                    b.HasOne("SwimmingAcademy.Models.AppCode", "UserType")
                        .WithMany("userUserTypes")
                        .HasForeignKey("UserTypeID")
                        .IsRequired()
                        .HasConstraintName("FK__users__UserTypeI__56B3DD81");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("SiteNavigation");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Action", b =>
                {
                    b.Navigation("Invoice_Items");

                    b.Navigation("Users_Privs");

                    b.Navigation("log1s");

                    b.Navigation("log2s");

                    b.Navigation("logs");

                    b.Navigation("trans");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.AppCode", b =>
                {
                    b.Navigation("CoachCoachTypeNavigations");

                    b.Navigation("CoachGenderNavigations");

                    b.Navigation("CoachcreatedAtSiteNavigations");

                    b.Navigation("CoachsiteNavigations");

                    b.Navigation("CoachupdatedAtSiteNavigations");

                    b.Navigation("CoachupdatedByNavigations");

                    b.Navigation("Detail1SwimmerLevelNavigations");

                    b.Navigation("Detail1siteNavigations");

                    b.Navigation("DetailSwimmerLevelNavigations");

                    b.Navigation("DetailsiteNavigations");

                    b.Navigation("Info2CLubNavigations");

                    b.Navigation("Info2CreatedAtSiteNavigations");

                    b.Navigation("Info2CurrentLevelNavigations");

                    b.Navigation("Info2GenderNavigations");

                    b.Navigation("Info2SiteNavigations");

                    b.Navigation("Info2StartLevelNavigations");

                    b.Navigation("Info2UpdatedAtSiteNavigations");

                    b.Navigation("InfoPTeamLevelNavigations");

                    b.Navigation("InfocreatedAtSiteNavigations");

                    b.Navigation("InfositeNavigations");

                    b.Navigation("InfoupdatedAtSiteNavigations");

                    b.Navigation("Invoice_ItemCreatedAtSiteNavigations");

                    b.Navigation("Invoice_ItemProducts");

                    b.Navigation("Invoice_ItemSiteNavigations");

                    b.Navigation("Invoice_ItemUpdatedAtSiteNavigations");

                    b.Navigation("Parents");

                    b.Navigation("TechnicalCurrentLevelNavigations");

                    b.Navigation("TechnicalFirstSPNavigations");

                    b.Navigation("TechnicalLastStarNavigations");

                    b.Navigation("TechnicalSecondSPNavigations");

                    b.Navigation("TechnicalSiteNavigations");

                    b.Navigation("TimeRacePlaces");

                    b.Navigation("TimeRaces");

                    b.Navigation("TimeSiteNavigations");

                    b.Navigation("Users_Privs");

                    b.Navigation("Users_Sites");

                    b.Navigation("info1SchoolTypeNavigations");

                    b.Navigation("info1createdAtSiteNavigations");

                    b.Navigation("info1schoolLevelNavigations");

                    b.Navigation("info1siteNavigations");

                    b.Navigation("info1updatedAtSiteNavigations");

                    b.Navigation("log1s");

                    b.Navigation("log2s");

                    b.Navigation("logs");

                    b.Navigation("tranproducts");

                    b.Navigation("transiteNavigations");

                    b.Navigation("userCreatedByNavigations");

                    b.Navigation("userSiteNavigations");

                    b.Navigation("userUserTypes");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Coach", b =>
                {
                    b.Navigation("Detail1s");

                    b.Navigation("Details");

                    b.Navigation("Infos");

                    b.Navigation("info1s");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Info", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("logs");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Info2", b =>
                {
                    b.Navigation("Detail1s");

                    b.Navigation("Details");

                    b.Navigation("Parent");

                    b.Navigation("Technical");

                    b.Navigation("Times");

                    b.Navigation("log1s");

                    b.Navigation("log2s");

                    b.Navigation("logs");

                    b.Navigation("trans");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.Invoice_Item", b =>
                {
                    b.Navigation("trans");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.info1", b =>
                {
                    b.Navigation("Detail1s");

                    b.Navigation("log1s");
                });

            modelBuilder.Entity("SwimmingAcademy.Models.user", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Info2CreatedByNavigations");

                    b.Navigation("Info2UpdatedByNavigations");

                    b.Navigation("InfocreatedByNavigations");

                    b.Navigation("InfoupdatedByNavigations");

                    b.Navigation("Invoice_ItemCreatedByNavigations");

                    b.Navigation("Invoice_ItemUpdateByNavigations");

                    b.Navigation("TechnicalAddedbyNavigations");

                    b.Navigation("TechnicalUpdatedByNavigations");

                    b.Navigation("Times");

                    b.Navigation("Users_Sites");

                    b.Navigation("info1createdByNavigations");

                    b.Navigation("info1updatedByNavigations");

                    b.Navigation("log1s");

                    b.Navigation("log2s");

                    b.Navigation("logs");

                    b.Navigation("trans");
                });
#pragma warning restore 612, 618
        }
    }
}
